/* Auto-generated by genmsg_cpp for file /home/sebasgm/new_slam_karto/vslam_source/sba/msg/Frame.msg */
#ifndef SBA_MESSAGE_FRAME_H
#define SBA_MESSAGE_FRAME_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "sba/CameraNode.h"
#include "sba/WorldPoint.h"
#include "sba/Projection.h"

namespace sba
{
template <class ContainerAllocator>
struct Frame_ {
  typedef Frame_<ContainerAllocator> Type;

  Frame_()
  : header()
  , nodes()
  , points()
  , projections()
  {
  }

  Frame_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , nodes(_alloc)
  , points(_alloc)
  , projections(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef std::vector< ::sba::CameraNode_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::sba::CameraNode_<ContainerAllocator> >::other >  _nodes_type;
  std::vector< ::sba::CameraNode_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::sba::CameraNode_<ContainerAllocator> >::other >  nodes;

  typedef std::vector< ::sba::WorldPoint_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::sba::WorldPoint_<ContainerAllocator> >::other >  _points_type;
  std::vector< ::sba::WorldPoint_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::sba::WorldPoint_<ContainerAllocator> >::other >  points;

  typedef std::vector< ::sba::Projection_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::sba::Projection_<ContainerAllocator> >::other >  _projections_type;
  std::vector< ::sba::Projection_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::sba::Projection_<ContainerAllocator> >::other >  projections;


  typedef boost::shared_ptr< ::sba::Frame_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sba::Frame_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Frame
typedef  ::sba::Frame_<std::allocator<void> > Frame;

typedef boost::shared_ptr< ::sba::Frame> FramePtr;
typedef boost::shared_ptr< ::sba::Frame const> FrameConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::sba::Frame_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::sba::Frame_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace sba

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::sba::Frame_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::sba::Frame_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::sba::Frame_<ContainerAllocator> > {
  static const char* value() 
  {
    return "418ca143f82258a762de2cff21411737";
  }

  static const char* value(const  ::sba::Frame_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x418ca143f82258a7ULL;
  static const uint64_t static_value2 = 0x62de2cff21411737ULL;
};

template<class ContainerAllocator>
struct DataType< ::sba::Frame_<ContainerAllocator> > {
  static const char* value() 
  {
    return "sba/Frame";
  }

  static const char* value(const  ::sba::Frame_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::sba::Frame_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# New Frame\n\
Header header\n\
\n\
# New nodes (generally just 1, but want to leave this open)\n\
CameraNode[] nodes\n\
\n\
# New points added from the frame\n\
WorldPoint[] points\n\
\n\
# New projections\n\
Projection[] projections\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: sba/CameraNode\n\
# Node Parameters\n\
uint32 index\n\
\n\
# Contains a translation and rotation\n\
geometry_msgs/Transform transform\n\
\n\
# Camera parameters from the K matrix\n\
float64 fx\n\
float64 fy\n\
float64 cx\n\
float64 cy\n\
\n\
# Only relevant for a stereo camera\n\
float64 baseline\n\
\n\
# Whether the camera is fixed in space: i.e., its position is known\n\
bool fixed\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Transform\n\
# This represents the transform between two coordinate frames in free space.\n\
\n\
Vector3 translation\n\
Quaternion rotation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: sba/WorldPoint\n\
# World Point parameters\n\
\n\
# Point index\n\
uint32 index\n\
\n\
# Coordinates in the world frame\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: sba/Projection\n\
# Projection\n\
\n\
# Camera index\n\
uint32 camindex\n\
\n\
# Point index\n\
uint32 pointindex\n\
\n\
# Projection into the image plane\n\
float64 u\n\
float64 v\n\
float64 d\n\
\n\
# Is this a stereo projection? (true if stereo, false if monocular)\n\
bool stereo\n\
\n\
# Use a covariance matrix?\n\
bool usecovariance\n\
\n\
# A 3x3 covariance matrix describing the error\n\
float64[9] covariance\n\
\n\
\n\
";
  }

  static const char* value(const  ::sba::Frame_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::sba::Frame_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::sba::Frame_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::sba::Frame_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.nodes);
    stream.next(m.points);
    stream.next(m.projections);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Frame_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sba::Frame_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::sba::Frame_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "nodes[]" << std::endl;
    for (size_t i = 0; i < v.nodes.size(); ++i)
    {
      s << indent << "  nodes[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::sba::CameraNode_<ContainerAllocator> >::stream(s, indent + "    ", v.nodes[i]);
    }
    s << indent << "points[]" << std::endl;
    for (size_t i = 0; i < v.points.size(); ++i)
    {
      s << indent << "  points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::sba::WorldPoint_<ContainerAllocator> >::stream(s, indent + "    ", v.points[i]);
    }
    s << indent << "projections[]" << std::endl;
    for (size_t i = 0; i < v.projections.size(); ++i)
    {
      s << indent << "  projections[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::sba::Projection_<ContainerAllocator> >::stream(s, indent + "    ", v.projections[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // SBA_MESSAGE_FRAME_H

