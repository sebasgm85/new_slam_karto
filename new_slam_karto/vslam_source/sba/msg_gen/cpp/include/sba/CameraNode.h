/* Auto-generated by genmsg_cpp for file /home/sebasgm/new_slam_karto/vslam_source/sba/msg/CameraNode.msg */
#ifndef SBA_MESSAGE_CAMERANODE_H
#define SBA_MESSAGE_CAMERANODE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "geometry_msgs/Transform.h"

namespace sba
{
template <class ContainerAllocator>
struct CameraNode_ {
  typedef CameraNode_<ContainerAllocator> Type;

  CameraNode_()
  : index(0)
  , transform()
  , fx(0.0)
  , fy(0.0)
  , cx(0.0)
  , cy(0.0)
  , baseline(0.0)
  , fixed(false)
  {
  }

  CameraNode_(const ContainerAllocator& _alloc)
  : index(0)
  , transform(_alloc)
  , fx(0.0)
  , fy(0.0)
  , cx(0.0)
  , cy(0.0)
  , baseline(0.0)
  , fixed(false)
  {
  }

  typedef uint32_t _index_type;
  uint32_t index;

  typedef  ::geometry_msgs::Transform_<ContainerAllocator>  _transform_type;
   ::geometry_msgs::Transform_<ContainerAllocator>  transform;

  typedef double _fx_type;
  double fx;

  typedef double _fy_type;
  double fy;

  typedef double _cx_type;
  double cx;

  typedef double _cy_type;
  double cy;

  typedef double _baseline_type;
  double baseline;

  typedef uint8_t _fixed_type;
  uint8_t fixed;


  typedef boost::shared_ptr< ::sba::CameraNode_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sba::CameraNode_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct CameraNode
typedef  ::sba::CameraNode_<std::allocator<void> > CameraNode;

typedef boost::shared_ptr< ::sba::CameraNode> CameraNodePtr;
typedef boost::shared_ptr< ::sba::CameraNode const> CameraNodeConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::sba::CameraNode_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::sba::CameraNode_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace sba

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::sba::CameraNode_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::sba::CameraNode_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::sba::CameraNode_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0605774cb8ba22085a77f85c7154baa7";
  }

  static const char* value(const  ::sba::CameraNode_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0605774cb8ba2208ULL;
  static const uint64_t static_value2 = 0x5a77f85c7154baa7ULL;
};

template<class ContainerAllocator>
struct DataType< ::sba::CameraNode_<ContainerAllocator> > {
  static const char* value() 
  {
    return "sba/CameraNode";
  }

  static const char* value(const  ::sba::CameraNode_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::sba::CameraNode_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Node Parameters\n\
uint32 index\n\
\n\
# Contains a translation and rotation\n\
geometry_msgs/Transform transform\n\
\n\
# Camera parameters from the K matrix\n\
float64 fx\n\
float64 fy\n\
float64 cx\n\
float64 cy\n\
\n\
# Only relevant for a stereo camera\n\
float64 baseline\n\
\n\
# Whether the camera is fixed in space: i.e., its position is known\n\
bool fixed\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Transform\n\
# This represents the transform between two coordinate frames in free space.\n\
\n\
Vector3 translation\n\
Quaternion rotation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::sba::CameraNode_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::sba::CameraNode_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::sba::CameraNode_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.index);
    stream.next(m.transform);
    stream.next(m.fx);
    stream.next(m.fy);
    stream.next(m.cx);
    stream.next(m.cy);
    stream.next(m.baseline);
    stream.next(m.fixed);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CameraNode_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sba::CameraNode_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::sba::CameraNode_<ContainerAllocator> & v) 
  {
    s << indent << "index: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.index);
    s << indent << "transform: ";
s << std::endl;
    Printer< ::geometry_msgs::Transform_<ContainerAllocator> >::stream(s, indent + "  ", v.transform);
    s << indent << "fx: ";
    Printer<double>::stream(s, indent + "  ", v.fx);
    s << indent << "fy: ";
    Printer<double>::stream(s, indent + "  ", v.fy);
    s << indent << "cx: ";
    Printer<double>::stream(s, indent + "  ", v.cx);
    s << indent << "cy: ";
    Printer<double>::stream(s, indent + "  ", v.cy);
    s << indent << "baseline: ";
    Printer<double>::stream(s, indent + "  ", v.baseline);
    s << indent << "fixed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fixed);
  }
};


} // namespace message_operations
} // namespace ros

#endif // SBA_MESSAGE_CAMERANODE_H

