"""autogenerated by genpy from sba/Frame.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import sba.msg
import geometry_msgs.msg
import std_msgs.msg

class Frame(genpy.Message):
  _md5sum = "418ca143f82258a762de2cff21411737"
  _type = "sba/Frame"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# New Frame
Header header

# New nodes (generally just 1, but want to leave this open)
CameraNode[] nodes

# New points added from the frame
WorldPoint[] points

# New projections
Projection[] projections

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: sba/CameraNode
# Node Parameters
uint32 index

# Contains a translation and rotation
geometry_msgs/Transform transform

# Camera parameters from the K matrix
float64 fx
float64 fy
float64 cx
float64 cy

# Only relevant for a stereo camera
float64 baseline

# Whether the camera is fixed in space: i.e., its position is known
bool fixed

================================================================================
MSG: geometry_msgs/Transform
# This represents the transform between two coordinate frames in free space.

Vector3 translation
Quaternion rotation

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: sba/WorldPoint
# World Point parameters

# Point index
uint32 index

# Coordinates in the world frame
float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: sba/Projection
# Projection

# Camera index
uint32 camindex

# Point index
uint32 pointindex

# Projection into the image plane
float64 u
float64 v
float64 d

# Is this a stereo projection? (true if stereo, false if monocular)
bool stereo

# Use a covariance matrix?
bool usecovariance

# A 3x3 covariance matrix describing the error
float64[9] covariance


"""
  __slots__ = ['header','nodes','points','projections']
  _slot_types = ['std_msgs/Header','sba/CameraNode[]','sba/WorldPoint[]','sba/Projection[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,nodes,points,projections

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Frame, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.nodes is None:
        self.nodes = []
      if self.points is None:
        self.points = []
      if self.projections is None:
        self.projections = []
    else:
      self.header = std_msgs.msg.Header()
      self.nodes = []
      self.points = []
      self.projections = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.nodes)
      buff.write(_struct_I.pack(length))
      for val1 in self.nodes:
        buff.write(_struct_I.pack(val1.index))
        _v1 = val1.transform
        _v2 = _v1.translation
        _x = _v2
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v3 = _v1.rotation
        _x = _v3
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1
        buff.write(_struct_5dB.pack(_x.fx, _x.fy, _x.cx, _x.cy, _x.baseline, _x.fixed))
      length = len(self.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.points:
        _x = val1
        buff.write(_struct_I4d.pack(_x.index, _x.x, _x.y, _x.z, _x.w))
      length = len(self.projections)
      buff.write(_struct_I.pack(length))
      for val1 in self.projections:
        _x = val1
        buff.write(_struct_2I3d2B.pack(_x.camindex, _x.pointindex, _x.u, _x.v, _x.d, _x.stereo, _x.usecovariance))
        buff.write(_struct_9d.pack(*val1.covariance))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.nodes is None:
        self.nodes = None
      if self.points is None:
        self.points = None
      if self.projections is None:
        self.projections = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.nodes = []
      for i in range(0, length):
        val1 = sba.msg.CameraNode()
        start = end
        end += 4
        (val1.index,) = _struct_I.unpack(str[start:end])
        _v4 = val1.transform
        _v5 = _v4.translation
        _x = _v5
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v6 = _v4.rotation
        _x = _v6
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        _x = val1
        start = end
        end += 41
        (_x.fx, _x.fy, _x.cx, _x.cy, _x.baseline, _x.fixed,) = _struct_5dB.unpack(str[start:end])
        val1.fixed = bool(val1.fixed)
        self.nodes.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.points = []
      for i in range(0, length):
        val1 = sba.msg.WorldPoint()
        _x = val1
        start = end
        end += 36
        (_x.index, _x.x, _x.y, _x.z, _x.w,) = _struct_I4d.unpack(str[start:end])
        self.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.projections = []
      for i in range(0, length):
        val1 = sba.msg.Projection()
        _x = val1
        start = end
        end += 34
        (_x.camindex, _x.pointindex, _x.u, _x.v, _x.d, _x.stereo, _x.usecovariance,) = _struct_2I3d2B.unpack(str[start:end])
        val1.stereo = bool(val1.stereo)
        val1.usecovariance = bool(val1.usecovariance)
        start = end
        end += 72
        val1.covariance = _struct_9d.unpack(str[start:end])
        self.projections.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.nodes)
      buff.write(_struct_I.pack(length))
      for val1 in self.nodes:
        buff.write(_struct_I.pack(val1.index))
        _v7 = val1.transform
        _v8 = _v7.translation
        _x = _v8
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v9 = _v7.rotation
        _x = _v9
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1
        buff.write(_struct_5dB.pack(_x.fx, _x.fy, _x.cx, _x.cy, _x.baseline, _x.fixed))
      length = len(self.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.points:
        _x = val1
        buff.write(_struct_I4d.pack(_x.index, _x.x, _x.y, _x.z, _x.w))
      length = len(self.projections)
      buff.write(_struct_I.pack(length))
      for val1 in self.projections:
        _x = val1
        buff.write(_struct_2I3d2B.pack(_x.camindex, _x.pointindex, _x.u, _x.v, _x.d, _x.stereo, _x.usecovariance))
        buff.write(val1.covariance.tostring())
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.nodes is None:
        self.nodes = None
      if self.points is None:
        self.points = None
      if self.projections is None:
        self.projections = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.nodes = []
      for i in range(0, length):
        val1 = sba.msg.CameraNode()
        start = end
        end += 4
        (val1.index,) = _struct_I.unpack(str[start:end])
        _v10 = val1.transform
        _v11 = _v10.translation
        _x = _v11
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v12 = _v10.rotation
        _x = _v12
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        _x = val1
        start = end
        end += 41
        (_x.fx, _x.fy, _x.cx, _x.cy, _x.baseline, _x.fixed,) = _struct_5dB.unpack(str[start:end])
        val1.fixed = bool(val1.fixed)
        self.nodes.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.points = []
      for i in range(0, length):
        val1 = sba.msg.WorldPoint()
        _x = val1
        start = end
        end += 36
        (_x.index, _x.x, _x.y, _x.z, _x.w,) = _struct_I4d.unpack(str[start:end])
        self.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.projections = []
      for i in range(0, length):
        val1 = sba.msg.Projection()
        _x = val1
        start = end
        end += 34
        (_x.camindex, _x.pointindex, _x.u, _x.v, _x.d, _x.stereo, _x.usecovariance,) = _struct_2I3d2B.unpack(str[start:end])
        val1.stereo = bool(val1.stereo)
        val1.usecovariance = bool(val1.usecovariance)
        start = end
        end += 72
        val1.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
        self.projections.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_I4d = struct.Struct("<I4d")
_struct_2I3d2B = struct.Struct("<2I3d2B")
_struct_9d = struct.Struct("<9d")
_struct_5dB = struct.Struct("<5dB")
_struct_3I = struct.Struct("<3I")
_struct_4d = struct.Struct("<4d")
_struct_3d = struct.Struct("<3d")
