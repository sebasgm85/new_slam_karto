"""autogenerated by genpy from sba/Projection.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Projection(genpy.Message):
  _md5sum = "3d5a2ac666ca0038812f550185cfc756"
  _type = "sba/Projection"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Projection

# Camera index
uint32 camindex

# Point index
uint32 pointindex

# Projection into the image plane
float64 u
float64 v
float64 d

# Is this a stereo projection? (true if stereo, false if monocular)
bool stereo

# Use a covariance matrix?
bool usecovariance

# A 3x3 covariance matrix describing the error
float64[9] covariance


"""
  __slots__ = ['camindex','pointindex','u','v','d','stereo','usecovariance','covariance']
  _slot_types = ['uint32','uint32','float64','float64','float64','bool','bool','float64[9]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       camindex,pointindex,u,v,d,stereo,usecovariance,covariance

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Projection, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.camindex is None:
        self.camindex = 0
      if self.pointindex is None:
        self.pointindex = 0
      if self.u is None:
        self.u = 0.
      if self.v is None:
        self.v = 0.
      if self.d is None:
        self.d = 0.
      if self.stereo is None:
        self.stereo = False
      if self.usecovariance is None:
        self.usecovariance = False
      if self.covariance is None:
        self.covariance = [0.,0.,0.,0.,0.,0.,0.,0.,0.]
    else:
      self.camindex = 0
      self.pointindex = 0
      self.u = 0.
      self.v = 0.
      self.d = 0.
      self.stereo = False
      self.usecovariance = False
      self.covariance = [0.,0.,0.,0.,0.,0.,0.,0.,0.]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2I3d2B.pack(_x.camindex, _x.pointindex, _x.u, _x.v, _x.d, _x.stereo, _x.usecovariance))
      buff.write(_struct_9d.pack(*self.covariance))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 34
      (_x.camindex, _x.pointindex, _x.u, _x.v, _x.d, _x.stereo, _x.usecovariance,) = _struct_2I3d2B.unpack(str[start:end])
      self.stereo = bool(self.stereo)
      self.usecovariance = bool(self.usecovariance)
      start = end
      end += 72
      self.covariance = _struct_9d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2I3d2B.pack(_x.camindex, _x.pointindex, _x.u, _x.v, _x.d, _x.stereo, _x.usecovariance))
      buff.write(self.covariance.tostring())
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 34
      (_x.camindex, _x.pointindex, _x.u, _x.v, _x.d, _x.stereo, _x.usecovariance,) = _struct_2I3d2B.unpack(str[start:end])
      self.stereo = bool(self.stereo)
      self.usecovariance = bool(self.usecovariance)
      start = end
      end += 72
      self.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2I3d2B = struct.Struct("<2I3d2B")
_struct_9d = struct.Struct("<9d")
