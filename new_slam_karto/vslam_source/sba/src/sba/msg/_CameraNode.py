"""autogenerated by genpy from sba/CameraNode.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class CameraNode(genpy.Message):
  _md5sum = "0605774cb8ba22085a77f85c7154baa7"
  _type = "sba/CameraNode"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Node Parameters
uint32 index

# Contains a translation and rotation
geometry_msgs/Transform transform

# Camera parameters from the K matrix
float64 fx
float64 fy
float64 cx
float64 cy

# Only relevant for a stereo camera
float64 baseline

# Whether the camera is fixed in space: i.e., its position is known
bool fixed

================================================================================
MSG: geometry_msgs/Transform
# This represents the transform between two coordinate frames in free space.

Vector3 translation
Quaternion rotation

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

"""
  __slots__ = ['index','transform','fx','fy','cx','cy','baseline','fixed']
  _slot_types = ['uint32','geometry_msgs/Transform','float64','float64','float64','float64','float64','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       index,transform,fx,fy,cx,cy,baseline,fixed

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CameraNode, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.index is None:
        self.index = 0
      if self.transform is None:
        self.transform = geometry_msgs.msg.Transform()
      if self.fx is None:
        self.fx = 0.
      if self.fy is None:
        self.fy = 0.
      if self.cx is None:
        self.cx = 0.
      if self.cy is None:
        self.cy = 0.
      if self.baseline is None:
        self.baseline = 0.
      if self.fixed is None:
        self.fixed = False
    else:
      self.index = 0
      self.transform = geometry_msgs.msg.Transform()
      self.fx = 0.
      self.fy = 0.
      self.cx = 0.
      self.cy = 0.
      self.baseline = 0.
      self.fixed = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_I12dB.pack(_x.index, _x.transform.translation.x, _x.transform.translation.y, _x.transform.translation.z, _x.transform.rotation.x, _x.transform.rotation.y, _x.transform.rotation.z, _x.transform.rotation.w, _x.fx, _x.fy, _x.cx, _x.cy, _x.baseline, _x.fixed))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.transform is None:
        self.transform = geometry_msgs.msg.Transform()
      end = 0
      _x = self
      start = end
      end += 101
      (_x.index, _x.transform.translation.x, _x.transform.translation.y, _x.transform.translation.z, _x.transform.rotation.x, _x.transform.rotation.y, _x.transform.rotation.z, _x.transform.rotation.w, _x.fx, _x.fy, _x.cx, _x.cy, _x.baseline, _x.fixed,) = _struct_I12dB.unpack(str[start:end])
      self.fixed = bool(self.fixed)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_I12dB.pack(_x.index, _x.transform.translation.x, _x.transform.translation.y, _x.transform.translation.z, _x.transform.rotation.x, _x.transform.rotation.y, _x.transform.rotation.z, _x.transform.rotation.w, _x.fx, _x.fy, _x.cx, _x.cy, _x.baseline, _x.fixed))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.transform is None:
        self.transform = geometry_msgs.msg.Transform()
      end = 0
      _x = self
      start = end
      end += 101
      (_x.index, _x.transform.translation.x, _x.transform.translation.y, _x.transform.translation.z, _x.transform.rotation.x, _x.transform.rotation.y, _x.transform.rotation.z, _x.transform.rotation.w, _x.fx, _x.fy, _x.cx, _x.cy, _x.baseline, _x.fixed,) = _struct_I12dB.unpack(str[start:end])
      self.fixed = bool(self.fixed)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_I12dB = struct.Struct("<I12dB")
